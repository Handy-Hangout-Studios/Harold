// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Norm.Database.Contexts;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Norm.Migrations
{
    [DbContext(typeof(NormDbContext))]
    [Migration("20210214072310_AddGuildWelcomeMessageSettings")]
    partial class AddGuildWelcomeMessageSettings
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Norm.Database.Entities.GuildBackgroundJob", b =>
                {
                    b.Property<string>("HangfireJobId")
                        .HasColumnType("text");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<int>("GuildJobType")
                        .HasColumnType("integer")
                        .HasColumnName("job_type");

                    b.Property<string>("JobName")
                        .HasColumnType("text")
                        .HasColumnName("job_name");

                    b.Property<Instant>("ScheduledTime")
                        .HasColumnType("timestamp")
                        .HasColumnName("scheduled_time");

                    b.HasKey("HangfireJobId")
                        .HasName("hangfire_job_id");

                    b.ToTable("all_guild_background_jobs");
                });

            modelBuilder.Entity("Norm.Database.Entities.GuildEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("EventDesc")
                        .HasColumnType("text")
                        .HasColumnName("event_desc");

                    b.Property<string>("EventName")
                        .HasColumnType("text")
                        .HasColumnName("event_name");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.HasKey("Id")
                        .HasName("guild_event_id");

                    b.ToTable("all_guild_events");
                });

            modelBuilder.Entity("Norm.Database.Entities.GuildLogChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("log_channel_id");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.HasKey("Id")
                        .HasName("guild_log_channel_id");

                    b.ToTable("all_guild_log_channels");
                });

            modelBuilder.Entity("Norm.Database.Entities.GuildModerationAuditRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<int>("ModerationAction")
                        .HasColumnType("integer")
                        .HasColumnName("moderation_action");

                    b.Property<decimal>("ModeratorUserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("moderator_user_id");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<Instant>("Timestamp")
                        .HasColumnType("timestamp")
                        .HasColumnName("timestamp");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("audit_record_id");

                    b.ToTable("all_guild_moderation_audit_records");
                });

            modelBuilder.Entity("Norm.Database.Entities.GuildNovelRegistration", b =>
                {
                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<int>("NovelInfoId")
                        .HasColumnType("integer")
                        .HasColumnName("novel_info_id");

                    b.Property<decimal>("AnnouncementChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("announcement_channel_id");

                    b.Property<bool>("IsDm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_dm");

                    b.Property<decimal?>("MemberId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("member_id");

                    b.Property<bool>("PingEveryone")
                        .HasColumnType("boolean")
                        .HasColumnName("ping_everyone");

                    b.Property<bool>("PingNoOne")
                        .HasColumnType("boolean")
                        .HasColumnName("ping_no_one");

                    b.Property<decimal?>("RoleId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("role_id");

                    b.HasKey("GuildId", "NovelInfoId", "AnnouncementChannelId")
                        .HasName("guild_novel_registration_id");

                    b.HasIndex("NovelInfoId");

                    b.ToTable("guild_novel_registration");
                });

            modelBuilder.Entity("Norm.Database.Entities.GuildPrefix", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<string>("Prefix")
                        .HasColumnType("text")
                        .HasColumnName("prefix");

                    b.HasKey("Id")
                        .HasName("guild_prefix_id");

                    b.ToTable("all_guild_prefixes");
                });

            modelBuilder.Entity("Norm.Database.Entities.GuildWelcomeMessageSettings", b =>
                {
                    b.Property<decimal>("GuildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("ShouldPing")
                        .HasColumnType("boolean")
                        .HasColumnName("should_ping");

                    b.Property<bool>("ShouldWelcomeMembers")
                        .HasColumnType("boolean")
                        .HasColumnName("should_welcome_members");

                    b.HasKey("GuildId")
                        .HasName("guild_id");

                    b.ToTable("all_guild_welcome_message_settings");
                });

            modelBuilder.Entity("Norm.Database.Entities.NovelInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<decimal>("FictionId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("fiction_id");

                    b.Property<string>("FictionUri")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fiction_uri");

                    b.Property<decimal>("MostRecentChapterId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("most_recent_chapter_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("novel_name");

                    b.Property<string>("SyndicationUri")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("syndication_uri");

                    b.HasKey("Id")
                        .HasName("novel_info_id");

                    b.ToTable("novel_info");
                });

            modelBuilder.Entity("Norm.Database.Entities.UserTimeZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("TimeZoneId")
                        .HasColumnType("text")
                        .HasColumnName("timezone_id");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("user_timezone_id");

                    b.ToTable("all_user_time_zones");
                });

            modelBuilder.Entity("Norm.Database.Entities.GuildNovelRegistration", b =>
                {
                    b.HasOne("Norm.Database.Entities.NovelInfo", "NovelInfo")
                        .WithMany("AssociatedGuildNovelRegistrations")
                        .HasForeignKey("NovelInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NovelInfo");
                });

            modelBuilder.Entity("Norm.Database.Entities.NovelInfo", b =>
                {
                    b.Navigation("AssociatedGuildNovelRegistrations");
                });
#pragma warning restore 612, 618
        }
    }
}
